import 'package:riverpod/riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:summit_rock/src/features/results/application/result_service.dart';
import 'package:summit_rock/src/features/word_decoder/domain/result.dart';
import 'package:summit_rock/src/utilities/enums/encoded_lists.dart';
import 'package:summit_rock/src/utilities/list_english_words.dart';

import '../../settings/domain/summit_rock_year.dart';

part 'word_decoder_controller.g.dart';
//
// @riverpod
// List<String> outsideWords(OutsideWordsRef ref) {
//   return [];
// }
//
// @riverpod
// List<String> middleWords(MiddleWordsRef ref) {
//   return [];
// }

@riverpod
List<int> specialIndexes(Ref ref, {required SummitRockYear year}) {
  switch (year) {
    case SummitRockYear.twentyFour:
      return [];
    case SummitRockYear.twentyFive:
      // Special Indexes for N, E, S, W on the shirt
      return [0, 26, 52, 78]; // TODO Check these!
  }
}

@Riverpod(keepAlive: true)
class WordDecoderController extends _$WordDecoderController {
  List<int> _numbers = [];
  Map<int, String> _letterMap = {};

  @override
  FutureOr<void> build() {
    // Nothing to do
  }

  String _makeId(List<int> numbers) {
    String id = '';
    for (int i = 0; i < numbers.length; i++) {
      int num = numbers[i];
      id += i == 0 ? '$num' : '_$num';
    }
    return id;
  }

  Future<Result> getResults({
    required List<int> numbers,
    required Map<int, String> letterMap,
  }) async {
    _numbers = numbers;
    _letterMap = letterMap;
    Map<EncodedList, List<String>> decodedWords = {};
    Set<String> favorites = {};
    List<EncodedList> lists = ref.watch(encodedListsProvider);
    for (EncodedList list in lists.reversed) {
      List<String> decoded = _getDecodedList(list);
      decodedWords[list] = decoded;
      favorites.addAll(_findDictionaryWords(decoded));
    }

    final date = DateTime.now();
    final result = Result(
      id: _makeId(numbers),
      year: ref.watch(yearSelectionProvider),
      numbers: numbers,
      letterMap: letterMap,
      favorites: favorites.toList(),
      decodedWords: decodedWords,
      createdAt: date,
      updatedAt: date,
    );
    state = const AsyncValue.loading();
    state = await AsyncValue.guard(() async {
      await ref.read(resultServiceProvider).setResult(result);
    });
    _numbers.clear();
    _letterMap.clear();
    return result;
  }

  List<String> _getDecodedList(EncodedList list) {
    switch (list) {
      case EncodedList.outsideWords:
        return _decodeNormal(_outsideRing24);
      case EncodedList.outsideWordsWithSpaces:
        return _decodeNormal(_outsideRingWithSpaces24);
      case EncodedList.middleWords:
        return _decodeNormal(_middleRing24);
      case EncodedList.insideWords:
        return _decodeNormal(_insideRing24);
      case EncodedList.dotsOutside:
        return _decodeNormal(_dotsOutsideRing24);
      case EncodedList.dotsInside:
        return _decodeNormal(_dotsInsideRing24);
      case EncodedList.ticks:
        return _decodeNormal(_ticksRing24);
      case EncodedList.outsideWordsReverse:
        return _decodeReverse(_outsideRing24);
      case EncodedList.middleWordsReverse:
        return _decodeReverse(_middleRing24);
      case EncodedList.insideWordsReverse:
        return _decodeReverse(_insideRing24);
      case EncodedList.dotsOutsideReverse:
        return _decodeReverse(_dotsOutsideRing24);
      case EncodedList.dotsInsideReverse:
        return _decodeReverse(_dotsInsideRing24);
      case EncodedList.ticksReverse:
        return _decodeReverse(_ticksRing24);
      case EncodedList.outsideLetters25:
        return _decodeNormal(_outsideRing25);
      case EncodedList.outsideLettersReverse25:
        return _decodeReverse(_outsideRing25);
      case EncodedList.ticks25:
        return _decodeNormal(_ticksRing25);
      case EncodedList.ticksReverse25:
        return _decodeReverse(_ticksRing25);
    }
  }

  List<String> _decodeNormal(List<String> letters) {
    final List<String> words = [];
    for (int i = 0; i < letters.length; i++) {
      String word = '';
      for (int num in _numbers) {
        int index = (i + num) % letters.length;
        word += letters[index];
      }
      for (MapEntry entry in _letterMap.entries) {
        word =
            "${word.substring(0, entry.key)}${entry.value}${word.substring(entry.key)}";
      }
      words.add(word);
    }
    return words;
  }

  List<String> _decodeReverse(List<String> letters) {
    final List<String> words = [];
    for (int i = 0; i < letters.length; i++) {
      String word = '';
      for (int num in _numbers) {
        int index = (i - num) % letters.length;
        word += letters[index];
      }
      for (MapEntry entry in _letterMap.entries) {
        word =
            "${word.substring(0, entry.key)}${entry.value}${word.substring(entry.key)}";
      }
      words.add(word);
    }
    return words;
  }

  List<String> _findDictionaryWords(List<String> list) {
    final List<String> dictionary = ref.read(listEnglishWordsProvider);
    final Set<String> dictionaryWords = <String>{};
    for (String word in list) {
      if (dictionary.contains(word.toLowerCase())) {
        print("Found an English word: $word");
        dictionaryWords.add(word);
      }
    }

    return dictionaryWords.toList();
  }

  final _outsideRing24 = [
    "M",
    "O",
    "M",
    "E",
    "N",
    "T",
    "U",
    "M",
    "R",
    "E",
    "N",
    "E",
    "W",
    "A",
    "L",
    "R",
    "A",
    "D",
    "I",
    "A",
    "N",
    "T",
    "E",
    "M",
    "B",
    "A",
    "R",
    "K",
    "F",
    "L",
    "O",
    "U",
    "R",
    "I",
    "S",
    "H",
    "V",
    "I",
    "T",
    "A",
    "L",
    "I",
    "T",
    "Y",
    "T",
    "H",
    "R",
    "I",
    "V",
    "E",
    "T",
    "R",
    "A",
    "N",
    "S",
    "F",
    "O",
    "R",
    "M",
    "R",
    "E",
    "S",
    "I",
    "L",
    "I",
    "E",
    "N",
    "C",
    "E",
    "E",
    "M",
    "P",
    "O",
    "W",
    "E",
    "R",
    "R",
    "E",
    "V",
    "I",
    "T",
    "A",
    "L",
    "I",
    "Z",
    "E",
    "B",
    "R",
    "E",
    "A",
    "K",
    "T",
    "H",
    "R",
    "O",
    "U",
    "G",
    "H",
    "C",
    "O",
    "N",
    "Q",
    "U",
    "E",
    "R"
  ];
  final _outsideRingWithSpaces24 = [
    "M",
    "O",
    "M",
    "E",
    "N",
    "T",
    "U",
    "M",
    " ",
    "R",
    "E",
    "N",
    "E",
    "W",
    "A",
    "L",
    " ",
    "R",
    "A",
    "D",
    "I",
    "A",
    "N",
    "T",
    " ",
    "E",
    "M",
    "B",
    "A",
    "R",
    "K",
    " ",
    "F",
    "L",
    "O",
    "U",
    "R",
    "I",
    "S",
    "H",
    " ",
    "V",
    "I",
    "T",
    "A",
    "L",
    "I",
    "T",
    "Y",
    " ",
    "T",
    "H",
    "R",
    "I",
    "V",
    "E",
    " ",
    "T",
    "R",
    "A",
    "N",
    "S",
    "F",
    "O",
    "R",
    "M",
    " ",
    "R",
    "E",
    "S",
    "I",
    "L",
    "I",
    "E",
    "N",
    "C",
    "E",
    " ",
    "E",
    "M",
    "P",
    "O",
    "W",
    "E",
    "R",
    " ",
    "R",
    "E",
    "V",
    "I",
    "T",
    "A",
    "L",
    "I",
    "Z",
    "E",
    " ",
    "B",
    "R",
    "E",
    "A",
    "K",
    "T",
    "H",
    "R",
    "O",
    "U",
    "G",
    "H",
    " ",
    "C",
    "O",
    "N",
    "Q",
    "U",
    "E",
    "R",
    " "
  ];
  final _middleRing24 = [
    "S",
    "U",
    "M",
    "M",
    "I",
    "T",
    "R",
    "O",
    "C",
    "K",
    "S",
    "T",
    "A",
    "R",
    "S",
    "G",
    "O",
    "L",
    "D",
    "E",
    "N",
    "C",
    "H",
    "A",
    "N",
    "C",
    "E",
    "W",
    "E",
    "A",
    "R",
    "T",
    "H",
    "I",
    "S",
    "S",
    "H",
    "I",
    "R",
    "T",
    "J",
    "O",
    "I",
    "N",
    "T",
    "H",
    "E",
    "D",
    "A",
    "N",
    "C",
    "E",
    "\$",
    "1",
    "0",
    "0",
    "0",
    "0",
    "W",
    "A",
    "I",
    "T",
    "S",
    "I",
    "N",
    "D",
    "E",
    "S",
    "E",
    "R",
    "T",
    "S",
    "S",
    "P",
    "A",
    "R",
    "K",
    "F",
    "I",
    "N",
    "D",
    "T",
    "H",
    "E",
    "R",
    "O",
    "C",
    "K",
    "L",
    "I",
    "G",
    "H",
    "T",
    "U",
    "P",
    "T",
    "H",
    "E",
    "D",
    "A",
    "R",
    "K"
  ];
  final _insideRing24 = [
    "Y",
    "O",
    "U",
    "R",
    "H",
    "E",
    "A",
    "L",
    "T",
    "H",
    "J",
    "O",
    "U",
    "R",
    "N",
    "E",
    "Y",
    "E",
    "X",
    "E",
    "R",
    "C",
    "I",
    "S",
    "E",
    "I",
    "N",
    "D",
    "I",
    "S",
    "G",
    "U",
    "I",
    "S",
    "E",
    "T",
    "H",
    "E",
    "H",
    "U",
    "N",
    "T",
    "H",
    "A",
    "S",
    "B",
    "E",
    "G",
    "U",
    "N",
    "S",
    "U",
    "M",
    "M",
    "I",
    "T",
    "H",
    "A",
    "S",
    "E",
    "V",
    "E",
    "R",
    "Y",
    "T",
    "H",
    "I",
    "N",
    "G"
  ];

  final _dotsOutsideRing24 = [
    "E",
    "N",
    "T",
    "U",
    "M",
    " ",
    "R",
    "E",
    "N",
    "E",
    "W",
    "A",
    "L",
    " ",
    " ",
    "R",
    "A",
    "D",
    "A",
    "N",
    "T",
    " ",
    "E",
    "M",
    "B",
    "A",
    "R",
    "K",
    " ",
    " ",
    "L",
    "O",
    "U",
    "R",
    "I",
    "S",
    "H",
    " ",
    "V",
    "I",
    "T",
    "A",
    "L",
    "T",
    "Y",
    " ",
    "T",
    "H",
    "R",
    "I",
    "V",
    "E",
    "T",
    "R",
    "A",
    "N",
    "S",
    "F",
    "O",
    "R",
    "M",
    " ",
    " ",
    "R",
    "E",
    "S",
    "L",
    "I",
    "E",
    "N",
    "C",
    "E",
    " ",
    "E",
    "M",
    "P",
    "O",
    "W",
    "E",
    "R",
    " ",
    "R",
    "E",
    "V",
    "I",
    "T",
    "A",
    "I",
    "Z",
    "E",
    " ",
    "B",
    "R",
    "E",
    "A",
    "K",
    "T",
    "H",
    "R",
    "O",
    "U",
    "G",
    "H",
    " ",
    " ",
    "C",
    "O",
    "N",
    "Q",
    "U",
    "E",
    "R",
    " ",
    "M",
    "O",
    "M"
  ];

  final _dotsInsideRing24 = [
    "S",
    "U",
    "M",
    "M",
    "M",
    "I",
    "T",
    "R",
    "O",
    "C",
    "K",
    " ",
    "S",
    "T",
    "A",
    "R",
    "S",
    "G",
    "O",
    " ",
    "L",
    "D",
    "E",
    "N",
    "C",
    "H",
    " ",
    "A",
    "N",
    "C",
    "E",
    "W",
    "W",
    "E",
    "A",
    "R",
    "T",
    "H",
    "I",
    "S",
    "S",
    " ",
    "H",
    " ",
    "R",
    "T",
    "J",
    "O",
    "I",
    "N",
    "T",
    "H",
    " ",
    "E",
    "D",
    "A",
    "N",
    "C",
    "E",
    "E",
    " ",
    " ",
    "0",
    "0",
    "0",
    "0",
    "W",
    "W",
    "A",
    "I",
    "T",
    "S",
    "I",
    "N",
    "D",
    "E",
    "S",
    "E",
    " ",
    "R",
    "T",
    "S",
    "S",
    "P",
    "A",
    "R",
    "K",
    "F",
    " ",
    "N",
    " ",
    "D",
    "T",
    "H",
    "E",
    "R",
    "O",
    " ",
    "C",
    "K",
    "L",
    "I",
    "G",
    "H",
    "T",
    "U",
    " ",
    "P",
    "T",
    "H",
    "E",
    "D",
    "A",
    " ",
    "R",
    "K"
  ];
  final _ticksRing24 = [
    " ",
    " ",
    " ",
    " ",
    "Y",
    "O",
    "U",
    "R",
    "H",
    "E",
    "L",
    "T",
    "H",
    "J",
    "O",
    "U",
    "N",
    "E",
    "Y",
    " ",
    " ",
    " ",
    " ",
    " ",
    " ",
    " ",
    " ",
    " ",
    "E",
    "E",
    "R",
    "C",
    "S",
    "E",
    "I",
    "N",
    "D",
    "S",
    "G",
    "U",
    "S",
    "E",
    " ",
    " ",
    " ",
    " ",
    " ",
    " ",
    " ",
    " ",
    " ",
    "T",
    "H",
    "E",
    "H",
    "U",
    "T",
    " ",
    "H",
    "S",
    "B",
    "E",
    "G",
    "U",
    "N",
    " ",
    " ",
    " ",
    " ",
    " ",
    " ",
    " ",
    " ",
    "S",
    "U",
    "M",
    "M",
    "T",
    "H",
    "A",
    "S",
    "E",
    "V",
    "E",
    "R",
    "T",
    "H",
    "N",
    "G",
    " ",
    " ",
    " ",
    " "
  ];

  final _outsideRing25 = [
    "N",
    "X",
    "D",
    "Y",
    "G",
    "L",
    "P",
    "J",
    "K",
    "B",
    "D",
    "Q",
    "U",
    "H",
    "D",
    "V",
    "Y",
    "Z",
    "N",
    "P",
    "A",
    "N",
    "C",
    "A",
    "R",
    "K",
    "E",
    "M",
    "G",
    "F",
    "S",
    "U",
    "T",
    "U",
    "G",
    "L",
    "R",
    "E",
    "F",
    "Y",
    "J",
    "A",
    "W",
    "L",
    "S",
    "W",
    "C",
    "V",
    "H",
    "O",
    "T",
    "Z",
    "S",
    "I",
    "X",
    "B",
    "C",
    "E",
    "X",
    "F",
    "Q",
    "S",
    "M",
    "K",
    "O",
    "Z",
    "V",
    "M",
    "F",
    "H",
    "A",
    "J",
    "R",
    "W",
    "I",
    "P",
    "Z",
    "Q",
    "W",
    "X",
    "B",
    "T",
    "J",
    "R",
    "H",
    "E",
    "O",
    "Y",
    "D",
    "S",
    "V",
    "O",
    "T",
    "L",
    "I",
    "C",
    "G",
    "M",
    "I",
    "W",
    "N",
    "P",
    "Q",
    "B"
  ];

  final _ticksRing25 = [
    "N",
    "X",
    "Y",
    "G",
    "P",
    "J",
    "B",
    "D",
    "U",
    "H",
    "V",
    "Y",
    "Z",
    "P",
    "A",
    "C",
    "A",
    "K",
    "E",
    "M",
    "F",
    "S",
    "T",
    "U",
    "L",
    "R",
    "F",
    "Y",
    "A",
    "W",
    "S",
    "W",
    "C",
    "H",
    "O",
    "Z",
    "S",
    "X",
    "B",
    "E",
    "X",
    "Q",
    "S",
    "M",
    "O",
    "Z",
    "M",
    "F",
    "A",
    "J",
    "W",
    "I",
    "Z",
    "Q",
    "W",
    "X",
    "T",
    "J",
    "H",
    "E",
    "Y",
    "D",
    "V",
    "O",
    "L",
    "I",
    "G",
    "M",
    "W",
    "N",
    "Q",
    "B"
  ];
}
